#!/usr/bin/python

# makeitso-priv
# Can be called from either makeitso, or from the ssh auth-keys command statement
# mis-p is the main worker, and will implement actions on the box if the calling user is allowed, and if they provided the same checksum for the yml config as exists on the local box

import os
import sys
from mis_utils import *
import hashlib

# Utility defaults
safe_configs = '/etc/makeitso/makeitso.d'

args = arg_parser()
mislog=logunit(args.quiet, args.verbose, args.logfile)
mislog.log('debug', 'Starting privileged process')

# Read the yaml for our environment
yaml_filespec=safe_configs+'/'+args.environment+'.yaml'
env_yaml = get_yaml(mislog, yaml_filespec)

mislog.log('debug', 'Found yaml %s' % env_yaml['makeitso'])

# Make sure we have asked for something valid
parse_validate(mislog, args, env_yaml)

# We can always list jobs
show_list(mislog, args, env_yaml)

# Validity data
# Does the given sig match the config one 
sig_valid = compare_sig(mislog,yaml_filespec,args.checksum)
# Is the user valid for this task
user_valid = get_user(mislog, env_yaml['makeitso'][args.action])
# Was the utility executed locally (ie, by the non-priv makeitso)
run_local = get_local()

# Validate the user and action
authorize(mislog, sig_valid, run_local, user_valid)

# Substitute parameters
action_yaml=sub_params(mislog, env_yaml['makeitso'][args.action], args.params)

# Are we on a target machine?
if (get_target(mislog, env_yaml['makeitso'][args.action]['servers'])):
  # Y = execute action
  execute_action(mislog, action_yaml)
else:
  # N = contact another mis
  execute_remote(mislog, args)

mislog.log('debug', 'Finished makeitso-priv')
exit(0)

